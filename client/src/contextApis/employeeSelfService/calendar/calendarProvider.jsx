import { useEffect, useState } from "react";
import {
  getAllDepartments,
  getAllTicketCategory,
} from "../../../services/master_services/service";
import { toast } from "react-toastify";
import { CalendarContext } from "./calendarContext";
import {
  getAllEmployeeDetails,
  getEmployeeDetails,
} from "../../../services/employeeDetails_services/services";
import { useSelector } from "react-redux";
import {
  deleteTicket,
  getAllTicketsAllocatedToUser,
  getAllTicketsGeneratedByUser,
  getTicketDetailsById,
} from "../../../services/ticket_services/service";

export const CalendarProvider = ({ children }) => {
  const { userDetails } = useSelector((state) => state.auth);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [totalDysInMonth, setTotalDaysInMonth] = useState(null);
  const [dateTab, setDateTab] = useState([]);
  const [firstDayOfMonth, setFirstDayOfMonth] = useState(null);
  const [listing, setListing] = useState(null);
  const [data, setData] = useState(null);
  const [formVisibility, setFormVisibility] = useState(false);
  const [viewVisibility, setViewVisibility] = useState(false);
  const [viewModules, setViewModules] = useState(null);
  const [currentTab, setCurrentTab] = useState("my_requests");
  const [tabType, setTabType] = useState({
    name: "My Requests",
    value: "my_requests",
  });
  const [formType, setFormType] = useState("Add");
  const [componentType, setComponentType] = useState("listing");
  const [viewId, setViewId] = useState(null);
  const [updateId, setUpdateId] = useState(null);
  const [deleteId, setDeleteId] = useState(null);
  const [filter, setFilter] = useState({
    ticket_category_id: "",
    created_for_dept_id: "",
  });
  const [limit, setLimit] = useState(10);
  const [totalPages, setTotalPages] = useState(null);
  const [page, setPage] = useState(1);
  const [isLoading, setIsLoading] = useState(true);
  const [userOptions, setUserOptions] = useState([]);
  const [departmentOptions, setDepartmentOptions] = useState([]);
  const [tabList, setTabList] = useState([
    { name: "My Requests", value: "my_requests" },
    { name: "Allocated to Me", value: "allocate_to_me" },
  ]);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  const [monthsOptions, setMonthsOptions] = useState([
    { value: "1", label: "JAN" },
    { value: "2", label: "FEB" },
    { value: "3", label: "MAR" },
    { value: "4", label: "APR" },
    { value: "5", label: "MAY" },
    { value: "6", label: "JUN" },
    { value: "7", label: "JUL" },
    { value: "8", label: "AUG" },
    { value: "9", label: "SEP" },
    { value: "10", label: "OCT" },
    { value: "11", label: "NOV" },
    { value: "12", label: "DEC" },
  ]);
  const [daysOptions, setDaysOptions] = useState([
    { value: "0", label: "Sunday" },
    { value: "1", label: "Monday" },
    { value: "2", label: "Tuesday" },
    { value: "3", label: "Wednesday" },
    { value: "4", label: "Thursday" },
    { value: "5", label: "Friday" },
    { value: "6", label: "Saturday" },
  ]);

  const refreshData = () => {
    setRefreshTrigger((prev) => prev + 1);
  };

  // Create the final filter based on tab type
  const getFinalFilter = () => {
    const baseFilter = { ...filter };

    const { ...cleanFilter } = baseFilter;

    if (tabType.value === "my_requests") {
      return {
        ...cleanFilter,
      };
    } else if (tabType.value === "allocate_to_me") {
      return {
        ...cleanFilter,
      };
    }

    return cleanFilter;
  };

  // Get Days In Month
  const getDaysInMonth = (date) => {
    try {
      if (!currentDate) {
        toast.error("Invalid date selection!");
        return;
      }

      setTotalDaysInMonth(
        new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()
      );
    } catch (error) {
      toast.error(error.message);
      setTotalDaysInMonth(null);
    }
  };

  // Handle Current Date
  const handleCurrentDate = (type) => {
    const newDate = new Date(currentDate);

    if (type === "prev") {
      newDate.setMonth(newDate.getMonth() - 1);
    } else if (type === "next") {
      newDate.setMonth(newDate.getMonth() + 1);
    }

    setCurrentDate(newDate);
  };

  // Get First Day Of Month
  const getFirstDayOfMonth = (date) => {
    try {
      if (!currentDate) {
        toast.error("Invalid date selection!");
        return;
      }

      setFirstDayOfMonth(
        new Date(date.getFullYear(), date.getMonth(), 1).getDay()
      );
    } catch (error) {
      toast.error(error.message);
      setFirstDayOfMonth(null);
    }
  };
  // Get All Requests Generated By Me
  const getAllTicketsGeneratedByMeData = async (id) => {
    try {
      setIsLoading(true);
      const finalFilter = getFinalFilter();
      const data = await getAllTicketsGeneratedByUser(id, {
        limit,
        page,
        filter: finalFilter,
      });

      if (data.success) {
        setListing(data.data);
        setTotalPages(data.pagination.totalPages);
      } else {
        setListing(null);
        setTotalPages(null);
      }
    } catch (error) {
      setListing(null);
      setTotalPages(null);
    } finally {
      setIsLoading(false);
    }
  };

  // Get All Tickets Allocated To Me
  const getAllTicketsAllocatedToMeData = async (id) => {
    try {
      setIsLoading(true);
      const finalFilter = getFinalFilter();
      const data = await getAllTicketsAllocatedToUser(id, {
        limit,
        page,
        filter: finalFilter,
      });

      if (data.success) {
        setListing(data.data);
        setTotalPages(data.pagination.totalPages);
      } else {
        setListing(null);
        setTotalPages(null);
      }
    } catch (error) {
      setListing(null);
      setTotalPages(null);
    } finally {
      setIsLoading(false);
    }
  };

  // Get Data By Id
  const getDataById = async (id) => {
    try {
      const response = await getTicketDetailsById(id);
      if (response.success) {
        setData(response.data[0]);
      } else {
        toast.error(response.message);
        throw new Error(response.message);
      }
    } catch (error) {
      setData(null);
    }
  };

  // Handle Form Visibility
  const handleFormVisibility = (visibility, formType) => {
    if (visibility === "open") {
      if (formType === "add") {
        setFormType("Add");
        setUpdateId(null);
        setData(null);
      } else if (formType === "update") {
        setFormType("Update");
      }
      setFormVisibility(true);
    } else if (visibility === "close") {
      setFormVisibility(false);
      setUpdateId(null);
      setData(null);
    }
  };

  // Handle View Visibility
  const handleViewVisibility = (type) => {
    if (type === "open") {
      setViewVisibility(true);
    } else if (type === "close") {
      setViewVisibility(false);
      setViewId(null);
    }
  };

  // Handle Component Type
  const handleComponentView = (type) => {
    setComponentType((prev) => (prev = type));
  };

  // Handle Component Type
  const handleComponentClose = () => {
    setData(null);
    setUpdateId(null);
    setViewId(null);
  };

  // Handle User Delete Functionality
  const handleDelete = async (id) => {
    try {
      const response = await deleteTicket(id);

      if (response.success) {
        toast.success(response.message);
        setDeleteId(null);
      } else {
        toast.error(response.message);
      }
    } catch (error) {
      toast.error(error.message);
    }
  };

  // Handle Set Limit
  const handleLimitChange = (e) => {
    e.preventDefault();
    setLimit(e.target.value);
  };

  // Handle Filter Value
  const handleChangeFilter = (type, e) => {
    if (type === "input") {
      const { name, value } = e.target;
      setFilter((prev) => ({ ...prev, [name]: value }));
    }

    if (type === "dropdown") {
      const { field, value } = e;
      setFilter((prev) => ({ ...prev, [field]: value }));
    }
  };

  // Handle Tabs Click
  const handleTabClick = (tabType) => {
    setTabType(tabType);
    setCurrentTab(tabType.value);
  };

  // Get All Users List
  const getAllUsersOptions = async () => {
    try {
      const response = await getAllEmployeeDetails({
        limit: "",
        page: "",
        filter: {
          role_id: "",
          user_id: "",
        },
      });

      if (response.success) {
        setUserOptions(
          response?.data.map((data) => ({
            value: data?.id,
            label: data?.name,
          }))
        );
      } else {
        throw new Error(response.message);
      }
    } catch (error) {
      setUserOptions(null);
    }
  };

  // Get All Department List
  const getAllDepartmentOptions = async () => {
    try {
      const response = await getAllDepartments({
        limit: 500,
        page: "",
        filter: "",
      });

      if (response.success) {
        setDepartmentOptions(
          response?.data.map((data) => ({
            value: data?.id,
            label: data?.name,
          }))
        );
      } else {
        throw new Error(response.message);
      }
    } catch (error) {
      setDepartmentOptions(null);
    }
  };

  // Handle Form Close
  const handleFormClose = () => {
    if (currentTab === "my_requests") {
      handleTabClick({ name: "My Requests", value: "my_requests" });
    }

    if (currentTab === "allocate_to_me") {
      handleTabClick({
        name: "Allocated to Me",
        value: "allocate_to_me",
      });
    }
  };

  // For initial load and filter/pagination changes
  useEffect(() => {
    if (currentTab === "my_requests") {
      getAllTicketsGeneratedByMeData(userDetails?.id);
    } else if (currentTab === "allocate_to_me") {
      getAllTicketsAllocatedToMeData(userDetails?.id);
    }
  }, [
    limit,
    page,
    filter,
    refreshTrigger,
    currentTab,
    userDetails?.id,
    deleteId,
  ]);

  useEffect(() => {
    getAllDepartmentOptions();
    getAllUsersOptions();
  }, [updateId, deleteId]);

  // For update operations
  useEffect(() => {
    if (updateId || viewId) {
      const id = updateId || viewId;
      getDataById(id);
    }
  }, [updateId, viewId, tabType]);

  // For Delete operations
  useEffect(() => {
    if (deleteId) {
      const id = deleteId;
      handleDelete(id);
    }
  }, [deleteId]);

  // Load Current Days In Month
  useEffect(() => {
    if (currentDate) {
      getDaysInMonth(currentDate);
      getFirstDayOfMonth(currentDate);
    }
  }, [currentDate]);

  // Load Current Dates In Month
  useEffect(() => {
    if (totalDysInMonth !== null && firstDayOfMonth !== null) {
      const dateElements = [];

      // Add empty cells for days before the first day of the month
      for (let i = 0; i < firstDayOfMonth; i++) {
        dateElements.push(
          <div key={`empty-${i}`} className="text-center p-2 opacity-50"></div>
        );
      }

      // Add cells for each day of the month
      for (let day = 1; day <= totalDysInMonth; day++) {
        dateElements.push(
          <div
            key={`day-${day}`}
            className="rounded-[20px] text-center p-2 border border-gray-200 min-h-[50px] flex justify-center items-center hover:bg-gray-100"
          >
            {day}
          </div>
        );
      }

      setDateTab(dateElements);
    }
  }, [totalDysInMonth, firstDayOfMonth]);

  const styledComponent = {
    control: (base) => ({
      ...base,
      minHeight: "32px",
      height: "32px",
      borderRadius: "0.375rem",
      borderColor: "#d1d5db", // gray-300
      fontSize: "0.875rem", // text-sm
      paddingLeft: "0.5rem", // px-2
      paddingRight: "0.5rem", // px-2
      "&:hover": {
        borderColor: "#d1d5db", // gray-300
      },
    }),
    dropdownIndicator: (base) => ({
      ...base,
      padding: "4px",
    }),
    clearIndicator: (base) => ({
      ...base,
      padding: "4px",
    }),
    valueContainer: (base) => ({
      ...base,
      padding: "0px",
    }),
    input: (base) => ({
      ...base,
      margin: "0px",
      paddingBottom: "0px",
      paddingTop: "0px",
    }),
    option: (base) => ({
      ...base,
      fontSize: "0.875rem", // text-sm
    }),
  };

  const formSelectStyles = {
    control: (base) => ({
      ...base,
      minHeight: "32px",
      borderRadius: "0.5rem",
      borderColor: "rgb(78, 79, 80)",
      fontSize: "0.8rem",
      paddingLeft: "0.75rem",
      paddingRight: "0.75rem",
      paddingTop: "0.5rem",
      paddingBottom: "0.5rem",
      "&:hover": {
        borderColor: "#d1d5db",
      },
    }),
    singleValue: (base) => ({
      ...base,
      fontSize: "0.8rem",
    }),
    menu: (base) => ({
      ...base,
      fontSize: "0.875rem",
    }),
    dropdownIndicator: (base) => ({
      ...base,
      padding: "3px",
    }),
    clearIndicator: (base) => ({
      ...base,
      padding: "2px",
    }),
    valueContainer: (base) => ({
      ...base,
      padding: "0px",
    }),
    input: (base) => ({
      ...base,
      margin: "0px",
      paddingBottom: "0px",
      paddingTop: "0px",
    }),
    option: (base) => ({
      ...base,
      fontSize: "0.8rem",
    }),
  };

  const formatDateTime = (time) => {
    if (!time) return "N/A";

    const date = new Date(time);

    return date
      .toLocaleString("en-IN", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        hour12: true,
      })
      .replace(",", "");
  };

  console.log("Current Date====", currentDate);

  const contextValue = {
    listing,
    currentDate,
    totalDysInMonth,
    firstDayOfMonth,
    viewModules,
    viewVisibility,
    formVisibility,
    formType,
    data,
    filter,
    limit,
    totalPages,
    page,
    isLoading,
    viewId,
    updateId,
    deleteId,
    tabType,
    currentTab,
    componentType,
    formSelectStyles,
    styledComponent,
    dateTab,
    monthsOptions,
    daysOptions,
    departmentOptions,
    userOptions,
    tabList,
    formatDateTime,
    refreshData,
    handleFormClose,
    handleCurrentDate,
    getDataById,
    getAllUsersOptions,
    setUpdateId,
    setDeleteId,
    setPage,
    setViewId,
    setData,
    setViewVisibility,
    setDepartmentOptions,
    setComponentType,
    setTabList,
    setUserOptions,
    handleFormVisibility,
    handleTabClick,
    handleLimitChange,
    handleChangeFilter,
    handleViewVisibility,
    handleComponentView,
    handleComponentClose,
  };

  return (
    <CalendarContext.Provider value={contextValue}>
      {children}
    </CalendarContext.Provider>
  );
};
